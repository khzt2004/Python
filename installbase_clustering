# https://www.codementor.io/python/tutorial/data-science-python-pandas-r-dimensionality-reduction
# http://blog.yhat.com/posts/customer-segmentation-using-python.html
# excel file in google drive
# Import pandas module as 'pd'
import pandas as pd
from dateutil.parser import parse
from datetime import datetime
import xlrd
from pandasql import sqldf
from pandas import ExcelWriter
from numbers import Number
import numpy as np
import statsmodels.api as sm
import pylab as pl
from scipy import stats
from sklearn.externals.six import StringIO
from sklearn import preprocessing
from sklearn import cluster, tree, decomposition
import matplotlib.pyplot as plt
from sklearn.cluster import KMeans
from sklearn.decomposition import PCA
# import pydot

# Create a dataframe
# specify file path for windows users: target_file = r'C:\Users\k6o\aseanoutput.xlsx'
target_file1 = r'apsinstallbase_clustering1.xlsx'
xls_file1 = pd.read_excel(target_file1)
T1=pd.DataFrame(xls_file1)
T1.head()

# Step 1: what are the features I am going to use (that make sense)?


num_list = ['Country Mapping', 'SW Industry Mapping', 'SW ', 'SW Office',
            'SW Pro', 'SW Premium', 'Simulation', 'Simulation Pro', 'Simulation Premium', 
            'Motion', 'Flow Simulation', 'PDMEnterprise', '3DVIA Composer', 'Electrical 2D'
            , 'Electrical 3D', 'Electrical Professional', 'SW Plastic Professional', 'SW Plastic Premium',
            'SW Plastic Advanced', 'SW Inspection']
            
T2 = T1[num_list]
            
# do PCA 
pca = PCA(n_components=2)
pca.fit(T2)
PCA(copy=True, n_components=2, whiten=False)
existing_2d = pca.transform(T2)
existing_df_2d = pd.DataFrame(existing_2d)
existing_df_2d.index = T2.index
existing_df_2d.columns = ['PC1','PC2']
existing_df_2d.head()
print(pca.explained_variance_ratio_)
#Explained variance
pca = PCA().fit(T2)
plt.plot(np.cumsum(pca.explained_variance_ratio_))
plt.xlabel('number of components')
plt.ylabel('cumulative explained variance')
plt.show()

kmeans = KMeans(n_clusters=5)
clusters = kmeans.fit(T2)
T1['cluster'] = pd.Series(clusters.labels_, index=T1.index)

existing_df_2d.plot(
        kind='scatter',
        x='PC2',y='PC1',
        c=T1.cluster.astype(np.float), 
        figsize=(16,8))
        
df_is4 = T1[(T1['cluster'] == 4)]
df_is4['SW '].mean()
df_is4['SW Pro'].mean()
df_is4['PDMEnterprise'].mean()

df_is1 = T1[(T1['cluster'] == 1)]

df_is0 = T1[(T1['cluster'] == 0)]

df_is2 = T1[(T1['cluster'] == 2)]

df_is3 = T1[(T1['cluster'] == 3)]


