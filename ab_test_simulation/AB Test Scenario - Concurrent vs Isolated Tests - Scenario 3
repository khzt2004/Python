{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"AB Test Scenario - Concurrent vs Isolated Tests - Scenario 3","provenance":[],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","metadata":{"id":"QbB1-2GX3Sk_"},"source":["## Assumptions"]},{"cell_type":"markdown","metadata":{"id":"lGk585Pm3ZLD"},"source":["### Page and baseline"]},{"cell_type":"code","metadata":{"id":"drk1SryU3P9g","executionInfo":{"status":"ok","timestamp":1624591562474,"user_tz":-480,"elapsed":580,"user":{"displayName":"Dorota Wymyslowska","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjgTQFgxXw8wJtA9v_Mxsm5HMmMLaEArMUXsnPp=s64","userId":"12730794236903812710"}}},"source":["sessions = 27490581 # Homepage traffic 3 days\n","baseline = 0.248 # CVR1"],"execution_count":1,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"QGi3jBnV3uSv"},"source":["### Split and actual effect"]},{"cell_type":"code","metadata":{"id":"yV7G8QZ13rP7","executionInfo":{"status":"ok","timestamp":1624591562475,"user_tz":-480,"elapsed":11,"user":{"displayName":"Dorota Wymyslowska","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjgTQFgxXw8wJtA9v_Mxsm5HMmMLaEArMUXsnPp=s64","userId":"12730794236903812710"}}},"source":["controlA = 0.5\n","variantA = 0.5\n","controlB = 0.5\n","variantB = 0.5\n","\n","liftA = 0.05\n","liftB = 0.1\n","liftAB = 0.25"],"execution_count":2,"outputs":[]},{"cell_type":"code","metadata":{"id":"CJ6wGds34USk","executionInfo":{"status":"ok","timestamp":1624591562476,"user_tz":-480,"elapsed":11,"user":{"displayName":"Dorota Wymyslowska","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjgTQFgxXw8wJtA9v_Mxsm5HMmMLaEArMUXsnPp=s64","userId":"12730794236903812710"}}},"source":["runs = 10000"],"execution_count":3,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"qCRmoGkA4X1t"},"source":["## Simulations"]},{"cell_type":"code","metadata":{"id":"ME8vddqH5bpZ","executionInfo":{"status":"ok","timestamp":1624591562894,"user_tz":-480,"elapsed":428,"user":{"displayName":"Dorota Wymyslowska","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjgTQFgxXw8wJtA9v_Mxsm5HMmMLaEArMUXsnPp=s64","userId":"12730794236903812710"}}},"source":["import numpy as np\n","from statistics import median, mean\n","from scipy.stats import itemfreq"],"execution_count":4,"outputs":[]},{"cell_type":"code","metadata":{"id":"PwhLF4-Q-Gym","executionInfo":{"status":"ok","timestamp":1624591562895,"user_tz":-480,"elapsed":19,"user":{"displayName":"Dorota Wymyslowska","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjgTQFgxXw8wJtA9v_Mxsm5HMmMLaEArMUXsnPp=s64","userId":"12730794236903812710"}}},"source":["def test_results(n0,n1,p0,p1, labels = ['Control', 'Variant']):\n","  p = (n0*p0+n1*p1)/(n0+n1)\n","  std = np.sqrt(p*(1-p))\n","  lift = np.divide(p1,p0)-1\n","  t_value = abs(p1-p0)/(std*np.sqrt(1/n0+1/n1))\n","  stat_sig = t_value>=1.96\n","  \n","  winner = ''\n","  if stat_sig:\n","    if lift>0:\n","       winner = labels[1]\n","    else:\n","      winner = labels[0]\n","  else:\n","    winner = 'None'\n","\n","  return winner"],"execution_count":5,"outputs":[]},{"cell_type":"code","metadata":{"id":"may53LUb_9xW","executionInfo":{"status":"ok","timestamp":1624591562895,"user_tz":-480,"elapsed":17,"user":{"displayName":"Dorota Wymyslowska","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjgTQFgxXw8wJtA9v_Mxsm5HMmMLaEArMUXsnPp=s64","userId":"12730794236903812710"}}},"source":["actual_testA = test_results(controlA*sessions,variantA*sessions,baseline,baseline*(1+liftA), labels = ['Control', 'Variant A'] )\n","actual_testB = test_results(controlB*sessions,variantB*sessions,baseline,baseline*(1+liftB), labels = ['Control', 'Variant B'] )\n","actual_testAB = test_results(0.5*sessions,0.5*sessions,baseline,baseline*(1+liftAB), labels = ['Control', 'Variant A+B'] )\n","actual_testAB_vsA = test_results(0.5*sessions,0.5*sessions,baseline*(1+liftA),baseline*(1+liftAB), labels = ['Variant A', 'Variant A+B'] )"],"execution_count":6,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"1S7E21X6BWKa","executionInfo":{"status":"ok","timestamp":1624591562896,"user_tz":-480,"elapsed":17,"user":{"displayName":"Dorota Wymyslowska","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjgTQFgxXw8wJtA9v_Mxsm5HMmMLaEArMUXsnPp=s64","userId":"12730794236903812710"}},"outputId":"3ab7ecd7-5633-45a3-8509-4f17e83d0bec"},"source":["print(\n","  actual_testA, \"\\n\",\n","  actual_testB, \"\\n\",\n","  actual_testAB, \"\\n\",\n","  actual_testAB_vsA, \"\\n\",) "],"execution_count":7,"outputs":[{"output_type":"stream","text":["Variant A \n"," Variant B \n"," Variant A+B \n"," Variant A+B \n","\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"LCb_85VF43Rp"},"source":["### Separate Tests - B after A\n","\n"]},{"cell_type":"code","metadata":{"id":"PjoJgRwd4XaO","executionInfo":{"status":"ok","timestamp":1624591562896,"user_tz":-480,"elapsed":6,"user":{"displayName":"Dorota Wymyslowska","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjgTQFgxXw8wJtA9v_Mxsm5HMmMLaEArMUXsnPp=s64","userId":"12730794236903812710"}}},"source":["users_controlA_controlB = [0]*runs\n","users_controlA_variantB = [0]*runs\n","users_controlA_noneB = np.random.binomial(sessions, controlA, size=runs)\n","\n","users_variantA_controlB = [0]*runs\n","users_variantA_variantB = [0]*runs\n","users_variantA_noneB = np.random.binomial(sessions, variantA, size=runs)\n","users_variantA_noneB = [min(idx) for idx in zip(users_variantA_noneB,[sessions]*runs-users_controlA_noneB)]\n","\n","users_noneA_controlB = np.random.binomial(sessions, controlB, size=runs)\n","users_noneA_variantB = np.random.binomial(sessions, variantB, size=runs)\n","users_variantA_noneB = [min(idx) for idx in zip(users_noneA_variantB,[sessions]*runs-users_noneA_controlB)]\n","users_noneA_noneB = np.array([2*sessions]*runs)-np.array(users_controlA_controlB)-np.array(users_controlA_variantB)-np.array(users_controlA_noneB) \\\n","-np.array(users_variantA_controlB)-np.array(users_variantA_variantB)-np.array(users_variantA_noneB) \\\n","-np.array(users_noneA_controlB)-np.array(users_noneA_variantB)\n","users_noneA_noneB = [max(idx) for idx in zip(users_noneA_noneB.tolist(),[0]*runs)]"],"execution_count":8,"outputs":[]},{"cell_type":"code","metadata":{"id":"Jjje1vdm51Bl","executionInfo":{"status":"ok","timestamp":1624591562897,"user_tz":-480,"elapsed":6,"user":{"displayName":"Dorota Wymyslowska","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjgTQFgxXw8wJtA9v_Mxsm5HMmMLaEArMUXsnPp=s64","userId":"12730794236903812710"}}},"source":["conv_controlA_controlB = [0.0]*runs\n","conv_controlA_variantB = [0.0]*runs\n","conv_controlA_noneB = np.nan_to_num(np.divide(np.random.binomial(median(users_controlA_noneB), baseline, size=runs),median(users_controlA_noneB)),0)\n","\n","conv_variantA_controlB = [0.0]*runs\n","conv_variantA_variantB = [0.0]*runs\n","conv_variantA_noneB = np.nan_to_num(np.divide(np.random.binomial(median(users_variantA_noneB), baseline*(1+liftA), size=runs),median(users_variantA_noneB)),0)\n","\n","conv_noneA_controlB = np.nan_to_num(np.divide(np.random.binomial(median(users_noneA_controlB), baseline*(1+liftA), size=runs),median(users_noneA_controlB)),0)\n","conv_noneA_variantB = np.nan_to_num(np.divide(np.random.binomial(median(users_noneA_variantB), baseline*(1+liftAB), size=runs),median(users_noneA_variantB)),0)\n","conv_noneA_noneB = np.nan_to_num(np.divide(np.random.binomial(median(users_noneA_noneB), baseline*(1+liftA), size=runs),median(users_noneA_noneB)),0)"],"execution_count":9,"outputs":[]},{"cell_type":"code","metadata":{"id":"EXaaeivS9piG","executionInfo":{"status":"ok","timestamp":1624591563272,"user_tz":-480,"elapsed":380,"user":{"displayName":"Dorota Wymyslowska","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjgTQFgxXw8wJtA9v_Mxsm5HMmMLaEArMUXsnPp=s64","userId":"12730794236903812710"}}},"source":["separate1_testA=[]\n","separate1_testB=[]\n","separate1_testA_lift=[]\n","separate1_testB_lift=[]\n","separate1_testA_base=[]\n","separate1_testB_base=[]\n","\n","for i in range(runs):\n","  users_testA_control = users_controlA_controlB[i] + users_controlA_variantB[i] + users_controlA_noneB[i]\n","  users_testA_variant = users_variantA_controlB[i] + users_variantA_variantB[i] + users_variantA_noneB[i]\n","  conv_testA_control = (users_controlA_controlB[i]*conv_controlA_controlB[i] + users_controlA_variantB[i]*conv_controlA_variantB[i] \\\n","                        + users_controlA_noneB[i]*conv_controlA_noneB[i])/users_testA_control\n","  conv_testA_variant = (users_variantA_controlB[i]*conv_variantA_controlB[i] + users_variantA_variantB[i]*conv_variantA_variantB[i] \\\n","                        + users_variantA_noneB[i]*conv_variantA_noneB[i])/users_testA_variant\n","  separate1_testA.append(test_results(users_testA_control,users_testA_variant,conv_testA_control,conv_testA_variant, labels = ['Control', 'Variant A'] ))\n","  separate1_testA_lift.append(np.divide(conv_testA_variant,conv_testA_control)-1)\n","  separate1_testA_base.append(conv_testA_control)\n","\n","  users_testB_control = users_controlA_controlB[i] + users_variantA_controlB[i] + users_noneA_controlB[i]\n","  users_testB_variant = users_controlA_variantB[i] + users_variantA_variantB[i] + users_noneA_variantB[i]\n","  conv_testB_control = (users_controlA_controlB[i]*conv_controlA_controlB[i] + users_variantA_controlB[i]*conv_variantA_controlB[i] \\\n","                        + users_noneA_controlB[i]*conv_noneA_controlB[i])/users_testB_control\n","  conv_testB_variant = (users_controlA_variantB[i]*conv_controlA_variantB[i] + users_variantA_variantB[i]*conv_variantA_variantB[i] \\\n","                        + users_noneA_variantB[i]*conv_noneA_variantB[i])/users_testB_variant\n","  separate1_testB.append(test_results(users_testB_control,users_testB_variant,conv_testB_control,conv_testB_variant, labels = ['Variant A', 'Variant A+B'] ))\n","  separate1_testB_lift.append(np.divide(conv_testB_variant,conv_testB_control)-1)\n","  separate1_testB_base.append(conv_testB_control)"],"execution_count":10,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"RhuohwOOHAmE"},"source":["### Separate Tests - run in parallel but divert separate traffic to test A and B (isolate audiences)"]},{"cell_type":"code","metadata":{"id":"xMe3ZXQkHHTD","executionInfo":{"status":"ok","timestamp":1624591563274,"user_tz":-480,"elapsed":7,"user":{"displayName":"Dorota Wymyslowska","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjgTQFgxXw8wJtA9v_Mxsm5HMmMLaEArMUXsnPp=s64","userId":"12730794236903812710"}}},"source":["users_controlA_controlB = [0]*runs\n","users_controlA_variantB = [0]*runs\n","users_controlA_noneB = np.random.binomial(sessions/2, controlA, size=runs)\n","\n","users_variantA_controlB = [0]*runs\n","users_variantA_variantB = [0]*runs\n","users_variantA_noneB = np.random.binomial(sessions/2, variantA, size=runs)\n","users_variantA_noneB = [min(idx) for idx in zip(users_variantA_noneB,[sessions/2]*runs-users_controlA_noneB)]\n","\n","users_noneA_controlB = np.random.binomial(sessions/2, controlB, size=runs)\n","users_noneA_variantB = np.random.binomial(sessions/2, variantB, size=runs)\n","users_variantA_noneB = [min(idx) for idx in zip(users_noneA_variantB,[sessions/2]*runs-users_noneA_controlB)]\n","users_noneA_noneB = np.array([sessions]*runs)-np.array(users_controlA_controlB)-np.array(users_controlA_variantB)-np.array(users_controlA_noneB) \\\n","-np.array(users_variantA_controlB)-np.array(users_variantA_variantB)-np.array(users_variantA_noneB) \\\n","-np.array(users_noneA_controlB)-np.array(users_noneA_variantB)\n","users_noneA_noneB = [max(idx) for idx in zip(users_noneA_noneB.tolist(),[0]*runs)]"],"execution_count":11,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0QJTinpBHRyZ","executionInfo":{"status":"ok","timestamp":1624591563669,"user_tz":-480,"elapsed":4,"user":{"displayName":"Dorota Wymyslowska","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjgTQFgxXw8wJtA9v_Mxsm5HMmMLaEArMUXsnPp=s64","userId":"12730794236903812710"}},"outputId":"018286fc-d1b4-4917-a21f-cc06d7ca4cbd"},"source":["conv_controlA_controlB = np.nan_to_num(np.divide(np.random.binomial(median(users_controlA_controlB), baseline, size=runs),median(users_controlA_controlB)),0)\n","conv_controlA_variantB = np.nan_to_num(np.divide(np.random.binomial(median(users_controlA_variantB), baseline*(1+liftB), size=runs),median(users_controlA_variantB)),0)\n","conv_controlA_noneB = np.nan_to_num(np.divide(np.random.binomial(median(users_controlA_noneB), baseline, size=runs),median(users_controlA_noneB)),0)\n","\n","conv_variantA_controlB = np.nan_to_num(np.divide(np.random.binomial(median(users_variantA_controlB), baseline*(1+liftA), size=runs),median(users_variantA_controlB)),0)\n","conv_variantA_variantB = np.nan_to_num(np.divide(np.random.binomial(median(users_variantA_variantB), baseline*(1+liftAB), size=runs),median(users_variantA_variantB)),0)\n","conv_variantA_noneB = np.nan_to_num(np.divide(np.random.binomial(median(users_variantA_noneB), baseline*(1+liftA), size=runs),median(users_variantA_noneB)),0)\n","\n","conv_noneA_controlB = np.nan_to_num(np.divide(np.random.binomial(median(users_noneA_controlB), baseline, size=runs),median(users_noneA_controlB)),0)\n","conv_noneA_variantB = np.nan_to_num(np.divide(np.random.binomial(median(users_noneA_variantB), baseline*(1+liftB), size=runs),median(users_noneA_variantB)),0)\n","conv_noneA_noneB = np.nan_to_num(np.divide(np.random.binomial(median(users_noneA_noneB), baseline, size=runs),median(users_noneA_noneB)),0)"],"execution_count":12,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:1: RuntimeWarning: invalid value encountered in true_divide\n","  \"\"\"Entry point for launching an IPython kernel.\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:2: RuntimeWarning: invalid value encountered in true_divide\n","  \n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:5: RuntimeWarning: invalid value encountered in true_divide\n","  \"\"\"\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:6: RuntimeWarning: invalid value encountered in true_divide\n","  \n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"DV-xsPXpIJs7","executionInfo":{"status":"ok","timestamp":1624591564244,"user_tz":-480,"elapsed":577,"user":{"displayName":"Dorota Wymyslowska","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjgTQFgxXw8wJtA9v_Mxsm5HMmMLaEArMUXsnPp=s64","userId":"12730794236903812710"}}},"source":["separate2_testA=[]\n","separate2_testB=[]\n","separate2_testA_lift=[]\n","separate2_testB_lift=[]\n","separate2_testA_base=[]\n","separate2_testB_base=[]\n","\n","for i in range(runs):\n","  users_testA_control = users_controlA_controlB[i] + users_controlA_variantB[i] + users_controlA_noneB[i]\n","  users_testA_variant = users_variantA_controlB[i] + users_variantA_variantB[i] + users_variantA_noneB[i]\n","  conv_testA_control = (users_controlA_controlB[i]*conv_controlA_controlB[i] + users_controlA_variantB[i]*conv_controlA_variantB[i] \\\n","                        + users_controlA_noneB[i]*conv_controlA_noneB[i])/users_testA_control\n","  conv_testA_variant = (users_variantA_controlB[i]*conv_variantA_controlB[i] + users_variantA_variantB[i]*conv_variantA_variantB[i] \\\n","                        + users_variantA_noneB[i]*conv_variantA_noneB[i])/users_testA_variant\n","  separate2_testA.append(test_results(users_testA_control,users_testA_variant,conv_testA_control,conv_testA_variant, labels = ['Control', 'Variant A'] ))\n","  separate2_testA_lift.append(np.divide(conv_testA_variant,conv_testA_control)-1)\n","  separate2_testA_base.append(conv_testA_control)\n","\n","  users_testB_control = users_controlA_controlB[i] + users_variantA_controlB[i] + users_noneA_controlB[i]\n","  users_testB_variant = users_controlA_variantB[i] + users_variantA_variantB[i] + users_noneA_variantB[i]\n","  conv_testB_control = (users_controlA_controlB[i]*conv_controlA_controlB[i] + users_variantA_controlB[i]*conv_variantA_controlB[i] \\\n","                        + users_noneA_controlB[i]*conv_noneA_controlB[i])/users_testB_control\n","  conv_testB_variant = (users_controlA_variantB[i]*conv_controlA_variantB[i] + users_variantA_variantB[i]*conv_variantA_variantB[i] \\\n","                        + users_noneA_variantB[i]*conv_noneA_variantB[i])/users_testB_variant\n","  separate2_testB.append(test_results(users_testB_control,users_testB_variant,conv_testB_control,conv_testB_variant, labels = ['Control', 'Variant B'] ))\n","  separate2_testB_lift.append(np.divide(conv_testB_variant,conv_testB_control)-1)\n","  separate2_testB_base.append(conv_testB_control)\n"],"execution_count":13,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"IY3l8gtCIXFA"},"source":["### Concurrent Tests - run in parallel without worrying about any interference"]},{"cell_type":"code","metadata":{"id":"UrHblIZVIean","executionInfo":{"status":"ok","timestamp":1624591564245,"user_tz":-480,"elapsed":7,"user":{"displayName":"Dorota Wymyslowska","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjgTQFgxXw8wJtA9v_Mxsm5HMmMLaEArMUXsnPp=s64","userId":"12730794236903812710"}}},"source":["users_controlA_controlB = np.random.binomial(sessions, controlA*controlB, size=runs)\n","users_controlA_variantB = np.random.binomial(sessions, controlA*variantB, size=runs)\n","users_controlA_variantB = [min(idx) for idx in zip(users_controlA_variantB,[controlA*sessions]*runs-users_controlA_controlB)]\n","users_controlA_noneB = np.array([controlA*sessions]*runs)-np.array(users_controlA_controlB)-np.array(users_controlA_variantB)\n","users_controlA_noneB = [max(idx) for idx in zip(users_controlA_noneB.tolist(),[0]*runs)]\n","\n","users_variantA_controlB = np.random.binomial(sessions, variantA*controlB, size=runs)\n","users_variantA_variantB = np.random.binomial(sessions, variantA*variantB, size=runs)\n","users_variantA_variantB = [min(idx) for idx in zip(users_variantA_variantB,[variantA*sessions]*runs-users_variantA_controlB)]\n","users_variantA_noneB = np.array([variantA*sessions]*runs)-np.array(users_variantA_controlB)-np.array(users_variantA_variantB)\n","users_variantA_noneB = [max(idx) for idx in zip(users_variantA_noneB.tolist(),[0]*runs)]\n","\n","users_noneA_controlB = np.array([controlB*sessions]*runs)-np.array(users_controlA_controlB)-np.array(users_variantA_controlB)\n","users_noneA_controlB = [max(idx) for idx in zip(users_noneA_controlB.tolist(),[0]*runs)]\n","users_noneA_variantB = np.array([variantB*sessions]*runs)-np.array(users_controlA_variantB)-np.array(users_variantA_variantB)\n","users_noneA_variantB = [max(idx) for idx in zip(users_noneA_variantB.tolist(),[0]*runs)]\n","users_noneA_noneB = np.array([sessions]*runs)-np.array(users_controlA_controlB)-np.array(users_controlA_variantB)-np.array(users_controlA_noneB) \\\n","-np.array(users_variantA_controlB)-np.array(users_variantA_variantB)-np.array(users_variantA_noneB) \\\n","-np.array(users_noneA_controlB)-np.array(users_noneA_variantB)\n","users_noneA_noneB = [max(idx) for idx in zip(users_noneA_noneB.tolist(),[0]*runs)]"],"execution_count":14,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"VSeyzR-8IhNI","executionInfo":{"status":"ok","timestamp":1624591564625,"user_tz":-480,"elapsed":385,"user":{"displayName":"Dorota Wymyslowska","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjgTQFgxXw8wJtA9v_Mxsm5HMmMLaEArMUXsnPp=s64","userId":"12730794236903812710"}},"outputId":"88b9e6fc-3e1c-49f0-c621-a95077348b96"},"source":["conv_controlA_controlB = np.nan_to_num(np.divide(np.random.binomial(median(users_controlA_controlB), baseline, size=runs),median(users_controlA_controlB)),0)\n","conv_controlA_variantB = np.nan_to_num(np.divide(np.random.binomial(median(users_controlA_variantB), baseline*(1+liftB), size=runs),median(users_controlA_variantB)),0)\n","conv_controlA_noneB = np.nan_to_num(np.divide(np.random.binomial(median(users_controlA_noneB), baseline, size=runs),median(users_controlA_noneB)),0)\n","\n","conv_variantA_controlB = np.nan_to_num(np.divide(np.random.binomial(median(users_variantA_controlB), baseline*(1+liftA), size=runs),median(users_variantA_controlB)),0)\n","conv_variantA_variantB = np.nan_to_num(np.divide(np.random.binomial(median(users_variantA_variantB), baseline*(1+liftAB), size=runs),median(users_variantA_variantB)),0)\n","conv_variantA_noneB = np.nan_to_num(np.divide(np.random.binomial(median(users_variantA_noneB), baseline*(1+liftA), size=runs),median(users_variantA_noneB)),0)\n","\n","conv_noneA_controlB = np.nan_to_num(np.divide(np.random.binomial(median(users_noneA_controlB), baseline, size=runs),median(users_noneA_controlB)),0)\n","conv_noneA_variantB = np.nan_to_num(np.divide(np.random.binomial(median(users_noneA_variantB), baseline*(1+liftB), size=runs),median(users_noneA_variantB)),0)\n","conv_noneA_noneB = np.nan_to_num(np.divide(np.random.binomial(median(users_noneA_noneB), baseline, size=runs),median(users_noneA_noneB)),0)"],"execution_count":15,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:7: RuntimeWarning: invalid value encountered in true_divide\n","  import sys\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:9: RuntimeWarning: invalid value encountered in true_divide\n","  if __name__ == '__main__':\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:11: RuntimeWarning: invalid value encountered in true_divide\n","  # This is added back by InteractiveShellApp.init_path()\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"RUrDD6mTIjk8","executionInfo":{"status":"ok","timestamp":1624591565514,"user_tz":-480,"elapsed":892,"user":{"displayName":"Dorota Wymyslowska","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjgTQFgxXw8wJtA9v_Mxsm5HMmMLaEArMUXsnPp=s64","userId":"12730794236903812710"}}},"source":["concurrent_testA=[]\n","concurrent_testB=[]\n","concurrent_testA_lift=[]\n","concurrent_testB_lift=[]\n","concurrent_testA_base=[]\n","concurrent_testB_base=[]\n","\n","for i in range(runs):\n","  users_testA_control = users_controlA_controlB[i] + users_controlA_variantB[i] + users_controlA_noneB[i]\n","  users_testA_variant = users_variantA_controlB[i] + users_variantA_variantB[i] + users_variantA_noneB[i]\n","  conv_testA_control = (users_controlA_controlB[i]*conv_controlA_controlB[i] + users_controlA_variantB[i]*conv_controlA_variantB[i] \\\n","                        + users_controlA_noneB[i]*conv_controlA_noneB[i])/users_testA_control\n","  conv_testA_variant = (users_variantA_controlB[i]*conv_variantA_controlB[i] + users_variantA_variantB[i]*conv_variantA_variantB[i] \\\n","                        + users_variantA_noneB[i]*conv_variantA_noneB[i])/users_testA_variant\n","  concurrent_testA.append(test_results(users_testA_control,users_testA_variant,conv_testA_control,conv_testA_variant, labels = ['Control', 'Variant A'] ))\n","  concurrent_testA_lift.append(np.divide(conv_testA_variant,conv_testA_control)-1)\n","  concurrent_testA_base.append(conv_testA_control)\n","\n","  users_testB_control = users_controlA_controlB[i] + users_variantA_controlB[i] + users_noneA_controlB[i]\n","  users_testB_variant = users_controlA_variantB[i] + users_variantA_variantB[i] + users_noneA_variantB[i]\n","  conv_testB_control = (users_controlA_controlB[i]*conv_controlA_controlB[i] + users_variantA_controlB[i]*conv_variantA_controlB[i] \\\n","                        + users_noneA_controlB[i]*conv_noneA_controlB[i])/users_testB_control\n","  conv_testB_variant = (users_controlA_variantB[i]*conv_controlA_variantB[i] + users_variantA_variantB[i]*conv_variantA_variantB[i] \\\n","                        + users_noneA_variantB[i]*conv_noneA_variantB[i])/users_testB_variant\n","  concurrent_testB.append(test_results(users_testB_control,users_testB_variant,conv_testB_control,conv_testB_variant, labels = ['Control', 'Variant B'] ))\n","  concurrent_testB_lift.append(np.divide(conv_testB_variant,conv_testB_control)-1)\n","  concurrent_testB_base.append(conv_testB_control)"],"execution_count":16,"outputs":[]},{"cell_type":"code","metadata":{"id":"coM3VAIc4Wo5","executionInfo":{"status":"ok","timestamp":1624591566112,"user_tz":-480,"elapsed":602,"user":{"displayName":"Dorota Wymyslowska","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjgTQFgxXw8wJtA9v_Mxsm5HMmMLaEArMUXsnPp=s64","userId":"12730794236903812710"}}},"source":["multivariate_testA=[]\n","multivariate_testB=[]\n","multivariate_testAB=[]\n","multivariate_testA_lift=[]\n","multivariate_testB_lift=[]\n","multivariate_testAB_lift=[]\n","multivariate_testA_base=[]\n","multivariate_testB_base=[]\n","multivariate_testAB_base=[]\n","\n","for i in range(runs):\n","  users_testA_control = users_controlA_controlB[i]\n","  users_testA_variant = users_variantA_controlB[i] + users_variantA_noneB[i]\n","  conv_testA_control = (users_controlA_controlB[i]*conv_controlA_controlB[i])/users_testA_control\n","  conv_testA_variant = (users_variantA_controlB[i]*conv_variantA_controlB[i]  \\\n","                        + users_variantA_noneB[i]*conv_variantA_noneB[i])/users_testA_variant\n","  multivariate_testA.append(test_results(users_testA_control,users_testA_variant,conv_testA_control,conv_testA_variant, labels = ['Control', 'Variant A'] ))\n","  multivariate_testA_lift.append(np.divide(conv_testA_variant,conv_testA_control)-1)\n","  multivariate_testA_base.append(conv_testA_control)\n","\n","  users_testB_control = users_controlA_controlB[i] \n","  users_testB_variant = users_controlA_variantB[i] + users_noneA_variantB[i]\n","  conv_testB_control = (users_controlA_controlB[i]*conv_controlA_controlB[i])/users_testB_control\n","  conv_testB_variant = (users_controlA_variantB[i]*conv_controlA_variantB[i]  \\\n","                        + users_noneA_variantB[i]*conv_noneA_variantB[i])/users_testB_variant\n","  multivariate_testB.append(test_results(users_testB_control,users_testB_variant,conv_testB_control,conv_testB_variant, labels = ['Control', 'Variant B'] ))\n","  multivariate_testB_lift.append(np.divide(conv_testB_variant,conv_testB_control)-1)\n","  multivariate_testB_base.append(conv_testB_control)\n","\n","  users_testAB_control = users_controlA_controlB[i] \n","  users_testAB_variant = users_variantA_variantB[i] \n","  conv_testAB_control = (users_controlA_controlB[i]*conv_controlA_controlB[i])/users_testAB_control\n","  conv_testAB_variant = (users_variantA_variantB[i]*conv_variantA_variantB[i])/users_testAB_variant\n","  multivariate_testAB.append(test_results(users_testAB_control,users_testAB_variant,conv_testAB_control,conv_testAB_variant, labels = ['Control', 'Variant A+B'] ))\n","  multivariate_testAB_lift.append(np.divide(conv_testAB_variant,conv_testAB_control)-1)\n","  multivariate_testAB_base.append(conv_testAB_control)"],"execution_count":17,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"HEnIF882KKEJ"},"source":["## Compare Tests"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":34},"id":"N57Y1H9EKHTR","executionInfo":{"status":"ok","timestamp":1624591566113,"user_tz":-480,"elapsed":12,"user":{"displayName":"Dorota Wymyslowska","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjgTQFgxXw8wJtA9v_Mxsm5HMmMLaEArMUXsnPp=s64","userId":"12730794236903812710"}},"outputId":"023315a9-a963-485a-f701-38195d189a0b"},"source":["actual_testA"],"execution_count":18,"outputs":[{"output_type":"execute_result","data":{"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"},"text/plain":["'Variant A'"]},"metadata":{"tags":[]},"execution_count":18}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"y0UgI1snMYzT","executionInfo":{"status":"ok","timestamp":1624591566114,"user_tz":-480,"elapsed":11,"user":{"displayName":"Dorota Wymyslowska","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjgTQFgxXw8wJtA9v_Mxsm5HMmMLaEArMUXsnPp=s64","userId":"12730794236903812710"}},"outputId":"8a06f842-b884-4fc6-8dbf-2adcba5494a5"},"source":["a = 0 \n","c = 0\n","for x in separate1_testA:\n"," if x==actual_testA:\n","   a = a+ 1\n","print(\"The same as actual test A \", a/runs, \" with avg. lift \", mean (separate1_testA_lift), \" vs baseline of \", mean(separate1_testA_base) )\n","print(np.unique(separate1_testA,return_counts=True))"],"execution_count":19,"outputs":[{"output_type":"stream","text":["The same as actual test A  1.0  with avg. lift  0.04999801065603252  vs baseline of  0.24800107524018572\n","(array(['Variant A'], dtype='<U9'), array([10000]))\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"P8KTiLn2mQ7u","executionInfo":{"status":"ok","timestamp":1624591566575,"user_tz":-480,"elapsed":469,"user":{"displayName":"Dorota Wymyslowska","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjgTQFgxXw8wJtA9v_Mxsm5HMmMLaEArMUXsnPp=s64","userId":"12730794236903812710"}},"outputId":"3e0ad588-9b15-4f0f-ff00-9d62de2fcf34"},"source":["a = 0 \n","c = 0\n","for x in separate1_testB:\n"," if x==actual_testAB_vsA:\n","   a = a+ 1\n","print(\"The same as actual test B\", a/runs, \" with avg. lift \", mean (separate1_testB_lift), \" vs baseline of \", mean(separate1_testB_base) )\n","print(np.unique(separate1_testB,return_counts=True))"],"execution_count":20,"outputs":[{"output_type":"stream","text":["The same as actual test B 1.0  with avg. lift  0.1904799915561261  vs baseline of  0.26039984952719614\n","(array(['Variant A+B'], dtype='<U11'), array([10000]))\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"XPY06YjVMkeH","executionInfo":{"status":"ok","timestamp":1624591566575,"user_tz":-480,"elapsed":30,"user":{"displayName":"Dorota Wymyslowska","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjgTQFgxXw8wJtA9v_Mxsm5HMmMLaEArMUXsnPp=s64","userId":"12730794236903812710"}},"outputId":"828fb8e3-dba8-487d-8d2d-95428a7b1527"},"source":["a = 0 \n","c = 0\n","for x in separate2_testA:\n"," if x==actual_testA:\n","   a = a+ 1\n","print(\"The same as actual test A\", a/runs, \" with avg. lift \", mean (separate2_testA_lift), \" vs baseline of \", mean(separate2_testA_base) )\n","print(np.unique(separate2_testA,return_counts=True))"],"execution_count":21,"outputs":[{"output_type":"stream","text":["The same as actual test A 1.0  with avg. lift  0.0500056251404858  vs baseline of  0.24800078998490105\n","(array(['Variant A'], dtype='<U9'), array([10000]))\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"2ngugl6imw0V","executionInfo":{"status":"ok","timestamp":1624591566576,"user_tz":-480,"elapsed":27,"user":{"displayName":"Dorota Wymyslowska","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjgTQFgxXw8wJtA9v_Mxsm5HMmMLaEArMUXsnPp=s64","userId":"12730794236903812710"}},"outputId":"57f3c53e-9320-48a1-92b5-cedd88198590"},"source":["a = 0 \n","c = 0\n","for x in separate2_testB:\n"," if x==actual_testB:\n","   a = a+ 1\n","print(\"The same as actual test B\", a/runs, \" with avg. lift \", mean (separate2_testB_lift), \" vs baseline of \", mean(separate2_testB_base) )\n","print(np.unique(separate2_testB,return_counts=True))"],"execution_count":22,"outputs":[{"output_type":"stream","text":["The same as actual test B 1.0  with avg. lift  0.0999843570827523  vs baseline of  0.24800348726769997\n","(array(['Variant B'], dtype='<U9'), array([10000]))\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"2MkHOl12K5ac","executionInfo":{"status":"ok","timestamp":1624591566576,"user_tz":-480,"elapsed":23,"user":{"displayName":"Dorota Wymyslowska","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjgTQFgxXw8wJtA9v_Mxsm5HMmMLaEArMUXsnPp=s64","userId":"12730794236903812710"}},"outputId":"24e7c7be-6ca0-4380-8f44-4748a31fc62d"},"source":["a = 0 \n","c = 0\n","for x in concurrent_testA:\n"," if x==actual_testA:\n","   a = a+ 1\n","print(\"A Winner as actual test A\", a/runs, \" with avg. lift \", mean (concurrent_testA_lift), \" vs baseline of \", mean(concurrent_testA_base) )\n","print(np.unique(concurrent_testA,return_counts=True))"],"execution_count":23,"outputs":[{"output_type":"stream","text":["A Winner as actual test A 1.0  with avg. lift  0.09513856447921315  vs baseline of  0.26039647366150226\n","(array(['Variant A'], dtype='<U9'), array([10000]))\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"2WGnperPnOn7","executionInfo":{"status":"ok","timestamp":1624591566577,"user_tz":-480,"elapsed":21,"user":{"displayName":"Dorota Wymyslowska","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjgTQFgxXw8wJtA9v_Mxsm5HMmMLaEArMUXsnPp=s64","userId":"12730794236903812710"}},"outputId":"5b4cfa0f-4e9c-4a1f-f639-48010b468c65"},"source":["a = 0 \n","c = 0\n","for x in concurrent_testB:\n"," if x==actual_testB:\n","   a = a+ 1\n","print(\"A Winner as actual test B\", a/runs, \" with avg. lift \", mean (concurrent_testB_lift), \" vs baseline of \", mean(concurrent_testB_base) )\n","print(np.unique(concurrent_testB,return_counts=True))"],"execution_count":24,"outputs":[{"output_type":"stream","text":["A Winner as actual test B 1.0  with avg. lift  0.1464276216166777  vs baseline of  0.2541760037386826\n","(array(['Variant B'], dtype='<U9'), array([10000]))\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"VC0ZX7ol7KLN","executionInfo":{"status":"ok","timestamp":1624591566577,"user_tz":-480,"elapsed":16,"user":{"displayName":"Dorota Wymyslowska","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjgTQFgxXw8wJtA9v_Mxsm5HMmMLaEArMUXsnPp=s64","userId":"12730794236903812710"}},"outputId":"276acfd2-d6ce-4e0c-8b58-21e23ada7484"},"source":["a = 0 \n","c = 0\n","for x in multivariate_testA:\n"," if x==actual_testA:\n","    a = a+ 1\n","print(\"A Winner as actual test A\", a/runs, \" with avg. lift \", mean (multivariate_testA_lift), \" vs baseline of \", mean(multivariate_testA_base) )\n","print(np.unique(multivariate_testA,return_counts=True))"],"execution_count":25,"outputs":[{"output_type":"stream","text":["A Winner as actual test A 1.0  with avg. lift  0.04980913745575433  vs baseline of  0.24799911464687802\n","(array(['Variant A'], dtype='<U9'), array([10000]))\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"czkGzN837Tm1","executionInfo":{"status":"ok","timestamp":1624591566577,"user_tz":-480,"elapsed":13,"user":{"displayName":"Dorota Wymyslowska","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjgTQFgxXw8wJtA9v_Mxsm5HMmMLaEArMUXsnPp=s64","userId":"12730794236903812710"}},"outputId":"d135f337-cb2c-42c3-f5c0-85f804eb18f5"},"source":["a = 0 \n","c = 0\n","for x in multivariate_testB:\n"," if x==actual_testB:\n","   a = a+ 1\n","print(\"A Winner as actual test B\", a/runs, \" with avg. lift \", mean (multivariate_testB_lift), \" vs baseline of \", mean(multivariate_testB_base) )\n","print(np.unique(multivariate_testB,return_counts=True))"],"execution_count":26,"outputs":[{"output_type":"stream","text":["A Winner as actual test B 1.0  with avg. lift  0.09999737992313232  vs baseline of  0.24799911464687802\n","(array(['Variant B'], dtype='<U9'), array([10000]))\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"BAb7npJo7X0B","executionInfo":{"status":"ok","timestamp":1624591566578,"user_tz":-480,"elapsed":11,"user":{"displayName":"Dorota Wymyslowska","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjgTQFgxXw8wJtA9v_Mxsm5HMmMLaEArMUXsnPp=s64","userId":"12730794236903812710"}},"outputId":"8a962156-8794-4688-e375-0c504f04de34"},"source":["a = 0 \n","c = 0\n","for x in multivariate_testAB:\n"," if x==actual_testAB:\n","   a = a+ 1\n","print(\"A Winner as actual test A+B\", a/runs, \" with avg. lift \", mean (multivariate_testAB_lift), \" vs baseline of \", mean(multivariate_testAB_base) )\n","print(np.unique(multivariate_testAB,return_counts=True))"],"execution_count":27,"outputs":[{"output_type":"stream","text":["A Winner as actual test A+B 1.0  with avg. lift  0.24999686684996303  vs baseline of  0.24799911464687802\n","(array(['Variant A+B'], dtype='<U11'), array([10000]))\n"],"name":"stdout"}]}]}