{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"AB Test Scenario - Concurrent vs Isolated Tests - Scenario 2","provenance":[],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","metadata":{"id":"QbB1-2GX3Sk_"},"source":["## Assumptions"]},{"cell_type":"markdown","metadata":{"id":"lGk585Pm3ZLD"},"source":["### Page and baseline"]},{"cell_type":"code","metadata":{"id":"drk1SryU3P9g","executionInfo":{"status":"ok","timestamp":1624590349795,"user_tz":-480,"elapsed":287,"user":{"displayName":"Dorota Wymyslowska","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjgTQFgxXw8wJtA9v_Mxsm5HMmMLaEArMUXsnPp=s64","userId":"12730794236903812710"}}},"source":["sessions = 27490581 # Homepage traffic 3 days\n","baseline = 0.248 # CVR1"],"execution_count":55,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"QGi3jBnV3uSv"},"source":["### Split and actual effect"]},{"cell_type":"code","metadata":{"id":"yV7G8QZ13rP7","executionInfo":{"status":"ok","timestamp":1624590350749,"user_tz":-480,"elapsed":468,"user":{"displayName":"Dorota Wymyslowska","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjgTQFgxXw8wJtA9v_Mxsm5HMmMLaEArMUXsnPp=s64","userId":"12730794236903812710"}}},"source":["controlA = 0.20\n","variantA = 0.20\n","controlB = 0.1\n","variantB = 0.9\n","\n","liftA = 0\n","liftB = 0.9\n","liftAB = (1+liftA)*(1+liftB)-1"],"execution_count":56,"outputs":[]},{"cell_type":"code","metadata":{"id":"CJ6wGds34USk","executionInfo":{"status":"ok","timestamp":1624590350753,"user_tz":-480,"elapsed":15,"user":{"displayName":"Dorota Wymyslowska","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjgTQFgxXw8wJtA9v_Mxsm5HMmMLaEArMUXsnPp=s64","userId":"12730794236903812710"}}},"source":["runs = 10000"],"execution_count":57,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"qCRmoGkA4X1t"},"source":["## Simulations"]},{"cell_type":"code","metadata":{"id":"ME8vddqH5bpZ","executionInfo":{"status":"ok","timestamp":1624590350753,"user_tz":-480,"elapsed":14,"user":{"displayName":"Dorota Wymyslowska","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjgTQFgxXw8wJtA9v_Mxsm5HMmMLaEArMUXsnPp=s64","userId":"12730794236903812710"}}},"source":["import numpy as np\n","from statistics import median, mean\n","from scipy.stats import itemfreq"],"execution_count":58,"outputs":[]},{"cell_type":"code","metadata":{"id":"PwhLF4-Q-Gym","executionInfo":{"status":"ok","timestamp":1624590350756,"user_tz":-480,"elapsed":16,"user":{"displayName":"Dorota Wymyslowska","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjgTQFgxXw8wJtA9v_Mxsm5HMmMLaEArMUXsnPp=s64","userId":"12730794236903812710"}}},"source":["def test_results(n0,n1,p0,p1, labels = ['Control', 'Variant']):\n","  p = (n0*p0+n1*p1)/(n0+n1)\n","  std = np.sqrt(p*(1-p))\n","  lift = np.divide(p1,p0)-1\n","  t_value = abs(p1-p0)/(std*np.sqrt(1/n0+1/n1))\n","  stat_sig = t_value>=1.96\n","  \n","  winner = ''\n","  if stat_sig:\n","    if lift>0:\n","       winner = labels[1]\n","    else:\n","      winner = labels[0]\n","  else:\n","    winner = 'None'\n","\n","  return winner"],"execution_count":59,"outputs":[]},{"cell_type":"code","metadata":{"id":"may53LUb_9xW","executionInfo":{"status":"ok","timestamp":1624590350757,"user_tz":-480,"elapsed":17,"user":{"displayName":"Dorota Wymyslowska","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjgTQFgxXw8wJtA9v_Mxsm5HMmMLaEArMUXsnPp=s64","userId":"12730794236903812710"}}},"source":["actual_testA = test_results(controlA*sessions,variantA*sessions,baseline,baseline*(1+liftA), labels = ['Control', 'Variant A'] )\n","actual_testB = test_results(controlB*sessions,variantB*sessions,baseline,baseline*(1+liftB), labels = ['Control', 'Variant B'] )\n","actual_testAB = test_results(0.5*sessions,0.5*sessions,baseline,baseline*(1+liftAB), labels = ['Control', 'Variant A+B'] )\n","actual_testAB_vsA = test_results(0.5*sessions,0.5*sessions,baseline*(1+liftA),baseline*(1+liftAB), labels = ['Variant A', 'Variant A+B'] )"],"execution_count":60,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"1S7E21X6BWKa","executionInfo":{"status":"ok","timestamp":1624590350757,"user_tz":-480,"elapsed":16,"user":{"displayName":"Dorota Wymyslowska","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjgTQFgxXw8wJtA9v_Mxsm5HMmMLaEArMUXsnPp=s64","userId":"12730794236903812710"}},"outputId":"bdfe35f6-b442-40c4-8f50-441b7940ae96"},"source":["print(\n","  actual_testA, \"\\n\",\n","  actual_testB, \"\\n\",\n","  actual_testAB, \"\\n\",\n","  actual_testAB_vsA, \"\\n\",) "],"execution_count":61,"outputs":[{"output_type":"stream","text":["None \n"," Variant B \n"," Variant A+B \n"," Variant A+B \n","\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"LCb_85VF43Rp"},"source":["### Separate Tests - B after A\n","\n"]},{"cell_type":"code","metadata":{"id":"PjoJgRwd4XaO","executionInfo":{"status":"ok","timestamp":1624590350758,"user_tz":-480,"elapsed":15,"user":{"displayName":"Dorota Wymyslowska","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjgTQFgxXw8wJtA9v_Mxsm5HMmMLaEArMUXsnPp=s64","userId":"12730794236903812710"}}},"source":["users_controlA_controlB = [0]*runs\n","users_controlA_variantB = [0]*runs\n","users_controlA_noneB = np.random.binomial(sessions, controlA, size=runs)\n","\n","users_variantA_controlB = [0]*runs\n","users_variantA_variantB = [0]*runs\n","users_variantA_noneB = np.random.binomial(sessions, variantA, size=runs)\n","users_variantA_noneB = [min(idx) for idx in zip(users_variantA_noneB,[sessions]*runs-users_controlA_noneB)]\n","\n","users_noneA_controlB = np.random.binomial(sessions, controlB, size=runs)\n","users_noneA_variantB = np.random.binomial(sessions, variantB, size=runs)\n","users_variantA_noneB = [min(idx) for idx in zip(users_noneA_variantB,[sessions]*runs-users_noneA_controlB)]\n","users_noneA_noneB = np.array([2*sessions]*runs)-np.array(users_controlA_controlB)-np.array(users_controlA_variantB)-np.array(users_controlA_noneB) \\\n","-np.array(users_variantA_controlB)-np.array(users_variantA_variantB)-np.array(users_variantA_noneB) \\\n","-np.array(users_noneA_controlB)-np.array(users_noneA_variantB)\n","users_noneA_noneB = [max(idx) for idx in zip(users_noneA_noneB.tolist(),[0]*runs)]"],"execution_count":62,"outputs":[]},{"cell_type":"code","metadata":{"id":"Jjje1vdm51Bl","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1624590350758,"user_tz":-480,"elapsed":14,"user":{"displayName":"Dorota Wymyslowska","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjgTQFgxXw8wJtA9v_Mxsm5HMmMLaEArMUXsnPp=s64","userId":"12730794236903812710"}},"outputId":"81d2dadf-c73b-4753-f44c-5bd886669a04"},"source":["conv_controlA_controlB = [0.0]*runs\n","conv_controlA_variantB = [0.0]*runs\n","conv_controlA_noneB = np.nan_to_num(np.divide(np.random.binomial(median(users_controlA_noneB), baseline, size=runs),median(users_controlA_noneB)),0)\n","\n","conv_variantA_controlB = [0.0]*runs\n","conv_variantA_variantB = [0.0]*runs\n","conv_variantA_noneB = np.nan_to_num(np.divide(np.random.binomial(median(users_variantA_noneB), baseline*(1+liftA), size=runs),median(users_variantA_noneB)),0)\n","\n","conv_noneA_controlB = np.nan_to_num(np.divide(np.random.binomial(median(users_noneA_controlB), baseline*(1+liftA), size=runs),median(users_noneA_controlB)),0)\n","conv_noneA_variantB = np.nan_to_num(np.divide(np.random.binomial(median(users_noneA_variantB), baseline*(1+liftAB), size=runs),median(users_noneA_variantB)),0)\n","conv_noneA_noneB = np.nan_to_num(np.divide(np.random.binomial(median(users_noneA_noneB), baseline*(1+liftA), size=runs),median(users_noneA_noneB)),0)"],"execution_count":63,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:11: RuntimeWarning: invalid value encountered in true_divide\n","  # This is added back by InteractiveShellApp.init_path()\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"EXaaeivS9piG","executionInfo":{"status":"ok","timestamp":1624590351250,"user_tz":-480,"elapsed":504,"user":{"displayName":"Dorota Wymyslowska","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjgTQFgxXw8wJtA9v_Mxsm5HMmMLaEArMUXsnPp=s64","userId":"12730794236903812710"}}},"source":["separate1_testA=[]\n","separate1_testB=[]\n","separate1_testA_lift=[]\n","separate1_testB_lift=[]\n","separate1_testA_base=[]\n","separate1_testB_base=[]\n","\n","for i in range(runs):\n","  users_testA_control = users_controlA_controlB[i] + users_controlA_variantB[i] + users_controlA_noneB[i]\n","  users_testA_variant = users_variantA_controlB[i] + users_variantA_variantB[i] + users_variantA_noneB[i]\n","  conv_testA_control = (users_controlA_controlB[i]*conv_controlA_controlB[i] + users_controlA_variantB[i]*conv_controlA_variantB[i] \\\n","                        + users_controlA_noneB[i]*conv_controlA_noneB[i])/users_testA_control\n","  conv_testA_variant = (users_variantA_controlB[i]*conv_variantA_controlB[i] + users_variantA_variantB[i]*conv_variantA_variantB[i] \\\n","                        + users_variantA_noneB[i]*conv_variantA_noneB[i])/users_testA_variant\n","  separate1_testA.append(test_results(users_testA_control,users_testA_variant,conv_testA_control,conv_testA_variant, labels = ['Control', 'Variant A'] ))\n","  separate1_testA_lift.append(np.divide(conv_testA_variant,conv_testA_control)-1)\n","  separate1_testA_base.append(conv_testA_control)\n","\n","  users_testB_control = users_controlA_controlB[i] + users_variantA_controlB[i] + users_noneA_controlB[i]\n","  users_testB_variant = users_controlA_variantB[i] + users_variantA_variantB[i] + users_noneA_variantB[i]\n","  conv_testB_control = (users_controlA_controlB[i]*conv_controlA_controlB[i] + users_variantA_controlB[i]*conv_variantA_controlB[i] \\\n","                        + users_noneA_controlB[i]*conv_noneA_controlB[i])/users_testB_control\n","  conv_testB_variant = (users_controlA_variantB[i]*conv_controlA_variantB[i] + users_variantA_variantB[i]*conv_variantA_variantB[i] \\\n","                        + users_noneA_variantB[i]*conv_noneA_variantB[i])/users_testB_variant\n","  separate1_testB.append(test_results(users_testB_control,users_testB_variant,conv_testB_control,conv_testB_variant, labels = ['Variant A', 'Variant A+B'] ))\n","  separate1_testB_lift.append(np.divide(conv_testB_variant,conv_testB_control)-1)\n","  separate1_testB_base.append(conv_testB_control)"],"execution_count":64,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"RhuohwOOHAmE"},"source":["### Separate Tests - run in parallel but divert separate traffic to test A and B (isolate audiences)"]},{"cell_type":"code","metadata":{"id":"xMe3ZXQkHHTD","executionInfo":{"status":"ok","timestamp":1624590351252,"user_tz":-480,"elapsed":10,"user":{"displayName":"Dorota Wymyslowska","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjgTQFgxXw8wJtA9v_Mxsm5HMmMLaEArMUXsnPp=s64","userId":"12730794236903812710"}}},"source":["users_controlA_controlB = [0]*runs\n","users_controlA_variantB = [0]*runs\n","users_controlA_noneB = np.random.binomial(sessions/2, controlA, size=runs)\n","\n","users_variantA_controlB = [0]*runs\n","users_variantA_variantB = [0]*runs\n","users_variantA_noneB = np.random.binomial(sessions/2, variantA, size=runs)\n","users_variantA_noneB = [min(idx) for idx in zip(users_variantA_noneB,[sessions/2]*runs-users_controlA_noneB)]\n","\n","users_noneA_controlB = np.random.binomial(sessions/2, controlB, size=runs)\n","users_noneA_variantB = np.random.binomial(sessions/2, variantB, size=runs)\n","users_variantA_noneB = [min(idx) for idx in zip(users_noneA_variantB,[sessions/2]*runs-users_noneA_controlB)]\n","users_noneA_noneB = np.array([sessions]*runs)-np.array(users_controlA_controlB)-np.array(users_controlA_variantB)-np.array(users_controlA_noneB) \\\n","-np.array(users_variantA_controlB)-np.array(users_variantA_variantB)-np.array(users_variantA_noneB) \\\n","-np.array(users_noneA_controlB)-np.array(users_noneA_variantB)\n","users_noneA_noneB = [max(idx) for idx in zip(users_noneA_noneB.tolist(),[0]*runs)]"],"execution_count":65,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0QJTinpBHRyZ","executionInfo":{"status":"ok","timestamp":1624590351253,"user_tz":-480,"elapsed":10,"user":{"displayName":"Dorota Wymyslowska","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjgTQFgxXw8wJtA9v_Mxsm5HMmMLaEArMUXsnPp=s64","userId":"12730794236903812710"}},"outputId":"9134e945-f5b7-4129-db47-f9e1b24801bc"},"source":["conv_controlA_controlB = np.nan_to_num(np.divide(np.random.binomial(median(users_controlA_controlB), baseline, size=runs),median(users_controlA_controlB)),0)\n","conv_controlA_variantB = np.nan_to_num(np.divide(np.random.binomial(median(users_controlA_variantB), baseline*(1+liftB), size=runs),median(users_controlA_variantB)),0)\n","conv_controlA_noneB = np.nan_to_num(np.divide(np.random.binomial(median(users_controlA_noneB), baseline, size=runs),median(users_controlA_noneB)),0)\n","\n","conv_variantA_controlB = np.nan_to_num(np.divide(np.random.binomial(median(users_variantA_controlB), baseline*(1+liftA), size=runs),median(users_variantA_controlB)),0)\n","conv_variantA_variantB = np.nan_to_num(np.divide(np.random.binomial(median(users_variantA_variantB), baseline*(1+liftAB), size=runs),median(users_variantA_variantB)),0)\n","conv_variantA_noneB = np.nan_to_num(np.divide(np.random.binomial(median(users_variantA_noneB), baseline*(1+liftA), size=runs),median(users_variantA_noneB)),0)\n","\n","conv_noneA_controlB = np.nan_to_num(np.divide(np.random.binomial(median(users_noneA_controlB), baseline, size=runs),median(users_noneA_controlB)),0)\n","conv_noneA_variantB = np.nan_to_num(np.divide(np.random.binomial(median(users_noneA_variantB), baseline*(1+liftB), size=runs),median(users_noneA_variantB)),0)\n","conv_noneA_noneB = np.nan_to_num(np.divide(np.random.binomial(median(users_noneA_noneB), baseline, size=runs),median(users_noneA_noneB)),0)"],"execution_count":66,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:1: RuntimeWarning: invalid value encountered in true_divide\n","  \"\"\"Entry point for launching an IPython kernel.\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:2: RuntimeWarning: invalid value encountered in true_divide\n","  \n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:5: RuntimeWarning: invalid value encountered in true_divide\n","  \"\"\"\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:6: RuntimeWarning: invalid value encountered in true_divide\n","  \n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:11: RuntimeWarning: invalid value encountered in true_divide\n","  # This is added back by InteractiveShellApp.init_path()\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"DV-xsPXpIJs7","executionInfo":{"status":"ok","timestamp":1624590352230,"user_tz":-480,"elapsed":984,"user":{"displayName":"Dorota Wymyslowska","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjgTQFgxXw8wJtA9v_Mxsm5HMmMLaEArMUXsnPp=s64","userId":"12730794236903812710"}}},"source":["separate2_testA=[]\n","separate2_testB=[]\n","separate2_testA_lift=[]\n","separate2_testB_lift=[]\n","separate2_testA_base=[]\n","separate2_testB_base=[]\n","\n","for i in range(runs):\n","  users_testA_control = users_controlA_controlB[i] + users_controlA_variantB[i] + users_controlA_noneB[i]\n","  users_testA_variant = users_variantA_controlB[i] + users_variantA_variantB[i] + users_variantA_noneB[i]\n","  conv_testA_control = (users_controlA_controlB[i]*conv_controlA_controlB[i] + users_controlA_variantB[i]*conv_controlA_variantB[i] \\\n","                        + users_controlA_noneB[i]*conv_controlA_noneB[i])/users_testA_control\n","  conv_testA_variant = (users_variantA_controlB[i]*conv_variantA_controlB[i] + users_variantA_variantB[i]*conv_variantA_variantB[i] \\\n","                        + users_variantA_noneB[i]*conv_variantA_noneB[i])/users_testA_variant\n","  separate2_testA.append(test_results(users_testA_control,users_testA_variant,conv_testA_control,conv_testA_variant, labels = ['Control', 'Variant A'] ))\n","  separate2_testA_lift.append(np.divide(conv_testA_variant,conv_testA_control)-1)\n","  separate2_testA_base.append(conv_testA_control)\n","\n","  users_testB_control = users_controlA_controlB[i] + users_variantA_controlB[i] + users_noneA_controlB[i]\n","  users_testB_variant = users_controlA_variantB[i] + users_variantA_variantB[i] + users_noneA_variantB[i]\n","  conv_testB_control = (users_controlA_controlB[i]*conv_controlA_controlB[i] + users_variantA_controlB[i]*conv_variantA_controlB[i] \\\n","                        + users_noneA_controlB[i]*conv_noneA_controlB[i])/users_testB_control\n","  conv_testB_variant = (users_controlA_variantB[i]*conv_controlA_variantB[i] + users_variantA_variantB[i]*conv_variantA_variantB[i] \\\n","                        + users_noneA_variantB[i]*conv_noneA_variantB[i])/users_testB_variant\n","  separate2_testB.append(test_results(users_testB_control,users_testB_variant,conv_testB_control,conv_testB_variant, labels = ['Control', 'Variant B'] ))\n","  separate2_testB_lift.append(np.divide(conv_testB_variant,conv_testB_control)-1)\n","  separate2_testB_base.append(conv_testB_control)\n"],"execution_count":67,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"IY3l8gtCIXFA"},"source":["### Concurrent Tests - run in parallel without worrying about any interference"]},{"cell_type":"code","metadata":{"id":"UrHblIZVIean","executionInfo":{"status":"ok","timestamp":1624590352233,"user_tz":-480,"elapsed":8,"user":{"displayName":"Dorota Wymyslowska","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjgTQFgxXw8wJtA9v_Mxsm5HMmMLaEArMUXsnPp=s64","userId":"12730794236903812710"}}},"source":["users_controlA_controlB = np.random.binomial(sessions, controlA*controlB, size=runs)\n","users_controlA_variantB = np.random.binomial(sessions, controlA*variantB, size=runs)\n","users_controlA_variantB = [min(idx) for idx in zip(users_controlA_variantB,[controlA*sessions]*runs-users_controlA_controlB)]\n","users_controlA_noneB = np.array([controlA*sessions]*runs)-np.array(users_controlA_controlB)-np.array(users_controlA_variantB)\n","users_controlA_noneB = [max(idx) for idx in zip(users_controlA_noneB.tolist(),[0]*runs)]\n","\n","users_variantA_controlB = np.random.binomial(sessions, variantA*controlB, size=runs)\n","users_variantA_variantB = np.random.binomial(sessions, variantA*variantB, size=runs)\n","users_variantA_variantB = [min(idx) for idx in zip(users_variantA_variantB,[variantA*sessions]*runs-users_variantA_controlB)]\n","users_variantA_noneB = np.array([variantA*sessions]*runs)-np.array(users_variantA_controlB)-np.array(users_variantA_variantB)\n","users_variantA_noneB = [max(idx) for idx in zip(users_variantA_noneB.tolist(),[0]*runs)]\n","\n","users_noneA_controlB = np.array([controlB*sessions]*runs)-np.array(users_controlA_controlB)-np.array(users_variantA_controlB)\n","users_noneA_controlB = [max(idx) for idx in zip(users_noneA_controlB.tolist(),[0]*runs)]\n","users_noneA_variantB = np.array([variantB*sessions]*runs)-np.array(users_controlA_variantB)-np.array(users_variantA_variantB)\n","users_noneA_variantB = [max(idx) for idx in zip(users_noneA_variantB.tolist(),[0]*runs)]\n","users_noneA_noneB = np.array([sessions]*runs)-np.array(users_controlA_controlB)-np.array(users_controlA_variantB)-np.array(users_controlA_noneB) \\\n","-np.array(users_variantA_controlB)-np.array(users_variantA_variantB)-np.array(users_variantA_noneB) \\\n","-np.array(users_noneA_controlB)-np.array(users_noneA_variantB)\n","users_noneA_noneB = [max(idx) for idx in zip(users_noneA_noneB.tolist(),[0]*runs)]"],"execution_count":68,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"VSeyzR-8IhNI","executionInfo":{"status":"ok","timestamp":1624590352234,"user_tz":-480,"elapsed":7,"user":{"displayName":"Dorota Wymyslowska","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjgTQFgxXw8wJtA9v_Mxsm5HMmMLaEArMUXsnPp=s64","userId":"12730794236903812710"}},"outputId":"a4891b1a-ac15-400a-894d-ee993c68c403"},"source":["conv_controlA_controlB = np.nan_to_num(np.divide(np.random.binomial(median(users_controlA_controlB), baseline, size=runs),median(users_controlA_controlB)),0)\n","conv_controlA_variantB = np.nan_to_num(np.divide(np.random.binomial(median(users_controlA_variantB), baseline*(1+liftB), size=runs),median(users_controlA_variantB)),0)\n","conv_controlA_noneB = np.nan_to_num(np.divide(np.random.binomial(median(users_controlA_noneB), baseline, size=runs),median(users_controlA_noneB)),0)\n","\n","conv_variantA_controlB = np.nan_to_num(np.divide(np.random.binomial(median(users_variantA_controlB), baseline*(1+liftA), size=runs),median(users_variantA_controlB)),0)\n","conv_variantA_variantB = np.nan_to_num(np.divide(np.random.binomial(median(users_variantA_variantB), baseline*(1+liftAB), size=runs),median(users_variantA_variantB)),0)\n","conv_variantA_noneB = np.nan_to_num(np.divide(np.random.binomial(median(users_variantA_noneB), baseline*(1+liftA), size=runs),median(users_variantA_noneB)),0)\n","\n","conv_noneA_controlB = np.nan_to_num(np.divide(np.random.binomial(median(users_noneA_controlB), baseline, size=runs),median(users_noneA_controlB)),0)\n","conv_noneA_variantB = np.nan_to_num(np.divide(np.random.binomial(median(users_noneA_variantB), baseline*(1+liftB), size=runs),median(users_noneA_variantB)),0)\n","conv_noneA_noneB = np.nan_to_num(np.divide(np.random.binomial(median(users_noneA_noneB), baseline, size=runs),median(users_noneA_noneB)),0)"],"execution_count":69,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:3: RuntimeWarning: invalid value encountered in true_divide\n","  This is separate from the ipykernel package so we can avoid doing imports until\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:11: RuntimeWarning: invalid value encountered in true_divide\n","  # This is added back by InteractiveShellApp.init_path()\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"RUrDD6mTIjk8","executionInfo":{"status":"ok","timestamp":1624590353226,"user_tz":-480,"elapsed":998,"user":{"displayName":"Dorota Wymyslowska","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjgTQFgxXw8wJtA9v_Mxsm5HMmMLaEArMUXsnPp=s64","userId":"12730794236903812710"}}},"source":["concurrent_testA=[]\n","concurrent_testB=[]\n","concurrent_testA_lift=[]\n","concurrent_testB_lift=[]\n","concurrent_testA_base=[]\n","concurrent_testB_base=[]\n","\n","for i in range(runs):\n","  users_testA_control = users_controlA_controlB[i] + users_controlA_variantB[i] + users_controlA_noneB[i]\n","  users_testA_variant = users_variantA_controlB[i] + users_variantA_variantB[i] + users_variantA_noneB[i]\n","  conv_testA_control = (users_controlA_controlB[i]*conv_controlA_controlB[i] + users_controlA_variantB[i]*conv_controlA_variantB[i] \\\n","                        + users_controlA_noneB[i]*conv_controlA_noneB[i])/users_testA_control\n","  conv_testA_variant = (users_variantA_controlB[i]*conv_variantA_controlB[i] + users_variantA_variantB[i]*conv_variantA_variantB[i] \\\n","                        + users_variantA_noneB[i]*conv_variantA_noneB[i])/users_testA_variant\n","  concurrent_testA.append(test_results(users_testA_control,users_testA_variant,conv_testA_control,conv_testA_variant, labels = ['Control', 'Variant A'] ))\n","  concurrent_testA_lift.append(np.divide(conv_testA_variant,conv_testA_control)-1)\n","  concurrent_testA_base.append(conv_testA_control)\n","\n","  users_testB_control = users_controlA_controlB[i] + users_variantA_controlB[i] + users_noneA_controlB[i]\n","  users_testB_variant = users_controlA_variantB[i] + users_variantA_variantB[i] + users_noneA_variantB[i]\n","  conv_testB_control = (users_controlA_controlB[i]*conv_controlA_controlB[i] + users_variantA_controlB[i]*conv_variantA_controlB[i] \\\n","                        + users_noneA_controlB[i]*conv_noneA_controlB[i])/users_testB_control\n","  conv_testB_variant = (users_controlA_variantB[i]*conv_controlA_variantB[i] + users_variantA_variantB[i]*conv_variantA_variantB[i] \\\n","                        + users_noneA_variantB[i]*conv_noneA_variantB[i])/users_testB_variant\n","  concurrent_testB.append(test_results(users_testB_control,users_testB_variant,conv_testB_control,conv_testB_variant, labels = ['Control', 'Variant B'] ))\n","  concurrent_testB_lift.append(np.divide(conv_testB_variant,conv_testB_control)-1)\n","  concurrent_testB_base.append(conv_testB_control)"],"execution_count":70,"outputs":[]},{"cell_type":"code","metadata":{"id":"coM3VAIc4Wo5","executionInfo":{"status":"ok","timestamp":1624590353841,"user_tz":-480,"elapsed":617,"user":{"displayName":"Dorota Wymyslowska","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjgTQFgxXw8wJtA9v_Mxsm5HMmMLaEArMUXsnPp=s64","userId":"12730794236903812710"}}},"source":["multivariate_testA=[]\n","multivariate_testB=[]\n","multivariate_testAB=[]\n","multivariate_testA_lift=[]\n","multivariate_testB_lift=[]\n","multivariate_testAB_lift=[]\n","multivariate_testA_base=[]\n","multivariate_testB_base=[]\n","multivariate_testAB_base=[]\n","\n","for i in range(runs):\n","  users_testA_control = users_controlA_controlB[i]\n","  users_testA_variant = users_variantA_controlB[i] + users_variantA_noneB[i]\n","  conv_testA_control = (users_controlA_controlB[i]*conv_controlA_controlB[i])/users_testA_control\n","  conv_testA_variant = (users_variantA_controlB[i]*conv_variantA_controlB[i]  \\\n","                        + users_variantA_noneB[i]*conv_variantA_noneB[i])/users_testA_variant\n","  multivariate_testA.append(test_results(users_testA_control,users_testA_variant,conv_testA_control,conv_testA_variant, labels = ['Control', 'Variant A'] ))\n","  multivariate_testA_lift.append(np.divide(conv_testA_variant,conv_testA_control)-1)\n","  multivariate_testA_base.append(conv_testA_control)\n","\n","  users_testB_control = users_controlA_controlB[i] \n","  users_testB_variant = users_controlA_variantB[i] + users_noneA_variantB[i]\n","  conv_testB_control = (users_controlA_controlB[i]*conv_controlA_controlB[i])/users_testB_control\n","  conv_testB_variant = (users_controlA_variantB[i]*conv_controlA_variantB[i]  \\\n","                        + users_noneA_variantB[i]*conv_noneA_variantB[i])/users_testB_variant\n","  multivariate_testB.append(test_results(users_testB_control,users_testB_variant,conv_testB_control,conv_testB_variant, labels = ['Control', 'Variant B'] ))\n","  multivariate_testB_lift.append(np.divide(conv_testB_variant,conv_testB_control)-1)\n","  multivariate_testB_base.append(conv_testB_control)\n","\n","  users_testAB_control = users_controlA_controlB[i] \n","  users_testAB_variant = users_variantA_variantB[i] \n","  conv_testAB_control = (users_controlA_controlB[i]*conv_controlA_controlB[i])/users_testAB_control\n","  conv_testAB_variant = (users_variantA_variantB[i]*conv_variantA_variantB[i])/users_testAB_variant\n","  multivariate_testAB.append(test_results(users_testAB_control,users_testAB_variant,conv_testAB_control,conv_testAB_variant, labels = ['Control', 'Variant A+B'] ))\n","  multivariate_testAB_lift.append(np.divide(conv_testAB_variant,conv_testAB_control)-1)\n","  multivariate_testAB_base.append(conv_testAB_control)"],"execution_count":71,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"HEnIF882KKEJ"},"source":["## Compare Tests"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":34},"id":"N57Y1H9EKHTR","executionInfo":{"status":"ok","timestamp":1624590353853,"user_tz":-480,"elapsed":27,"user":{"displayName":"Dorota Wymyslowska","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjgTQFgxXw8wJtA9v_Mxsm5HMmMLaEArMUXsnPp=s64","userId":"12730794236903812710"}},"outputId":"6658ff26-5cd2-4726-cf96-8bdc74592721"},"source":["actual_testA"],"execution_count":72,"outputs":[{"output_type":"execute_result","data":{"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"},"text/plain":["'None'"]},"metadata":{"tags":[]},"execution_count":72}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"y0UgI1snMYzT","executionInfo":{"status":"ok","timestamp":1624590353854,"user_tz":-480,"elapsed":24,"user":{"displayName":"Dorota Wymyslowska","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjgTQFgxXw8wJtA9v_Mxsm5HMmMLaEArMUXsnPp=s64","userId":"12730794236903812710"}},"outputId":"bf760871-3fdb-4d9b-fd95-aa9ba8800420"},"source":["a = 0 \n","c = 0\n","for x in separate1_testA:\n"," if x==actual_testA:\n","   a = a+ 1\n","print(\"The same as actual test A \", a/runs, \" with avg. lift \", mean (separate1_testA_lift), \" vs baseline of \", mean(separate1_testA_base) )\n","print(np.unique(separate1_testA,return_counts=True))"],"execution_count":73,"outputs":[{"output_type":"stream","text":["The same as actual test A  0.9481  with avg. lift  -9.900638102418769e-06  vs baseline of  0.24800197510013003\n","(array(['Control', 'None', 'Variant A'], dtype='<U9'), array([ 255, 9481,  264]))\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"P8KTiLn2mQ7u","executionInfo":{"status":"ok","timestamp":1624590353854,"user_tz":-480,"elapsed":21,"user":{"displayName":"Dorota Wymyslowska","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjgTQFgxXw8wJtA9v_Mxsm5HMmMLaEArMUXsnPp=s64","userId":"12730794236903812710"}},"outputId":"640ce89a-1eba-459d-fac4-3b898ed82fdf"},"source":["a = 0 \n","c = 0\n","for x in separate1_testB:\n"," if x==actual_testAB_vsA:\n","   a = a+ 1\n","print(\"The same as actual test B\", a/runs, \" with avg. lift \", mean (separate1_testB_lift), \" vs baseline of \", mean(separate1_testB_base) )\n","print(np.unique(separate1_testB,return_counts=True))"],"execution_count":74,"outputs":[{"output_type":"stream","text":["The same as actual test B 1.0  with avg. lift  0.899970863348945  vs baseline of  0.24800416474783873\n","(array(['Variant A+B'], dtype='<U11'), array([10000]))\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"XPY06YjVMkeH","executionInfo":{"status":"ok","timestamp":1624590353855,"user_tz":-480,"elapsed":20,"user":{"displayName":"Dorota Wymyslowska","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjgTQFgxXw8wJtA9v_Mxsm5HMmMLaEArMUXsnPp=s64","userId":"12730794236903812710"}},"outputId":"c8f3df14-f6c4-4a44-a462-529d53d2c2a1"},"source":["a = 0 \n","c = 0\n","for x in separate2_testA:\n"," if x==actual_testA:\n","   a = a+ 1\n","print(\"The same as actual test A\", a/runs, \" with avg. lift \", mean (separate2_testA_lift), \" vs baseline of \", mean(separate2_testA_base) )\n","print(np.unique(separate2_testA,return_counts=True))"],"execution_count":75,"outputs":[{"output_type":"stream","text":["The same as actual test A 0.9516  with avg. lift  -1.3040347937587605e-05  vs baseline of  0.24800232790271226\n","(array(['Control', 'None', 'Variant A'], dtype='<U9'), array([ 241, 9516,  243]))\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"2ngugl6imw0V","executionInfo":{"status":"ok","timestamp":1624590353857,"user_tz":-480,"elapsed":19,"user":{"displayName":"Dorota Wymyslowska","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjgTQFgxXw8wJtA9v_Mxsm5HMmMLaEArMUXsnPp=s64","userId":"12730794236903812710"}},"outputId":"a19f5928-32a8-436a-e45d-acaf0cdd0ff5"},"source":["a = 0 \n","c = 0\n","for x in separate2_testB:\n"," if x==actual_testB:\n","   a = a+ 1\n","print(\"The same as actual test B\", a/runs, \" with avg. lift \", mean (separate2_testB_lift), \" vs baseline of \", mean(separate2_testB_base) )\n","print(np.unique(separate2_testB,return_counts=True))"],"execution_count":76,"outputs":[{"output_type":"stream","text":["The same as actual test B 1.0  with avg. lift  0.9000204345807242  vs baseline of  0.24799832960477255\n","(array(['Variant B'], dtype='<U9'), array([10000]))\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"2MkHOl12K5ac","executionInfo":{"status":"ok","timestamp":1624590354364,"user_tz":-480,"elapsed":524,"user":{"displayName":"Dorota Wymyslowska","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjgTQFgxXw8wJtA9v_Mxsm5HMmMLaEArMUXsnPp=s64","userId":"12730794236903812710"}},"outputId":"48c8d3de-0d41-4064-e450-05cfba12566d"},"source":["a = 0 \n","c = 0\n","for x in concurrent_testA:\n"," if x==actual_testA:\n","   a = a+ 1\n","print(\"A Winner as actual test A\", a/runs, \" with avg. lift \", mean (concurrent_testA_lift), \" vs baseline of \", mean(concurrent_testA_base) )\n","print(np.unique(concurrent_testA,return_counts=True))"],"execution_count":77,"outputs":[{"output_type":"stream","text":["A Winner as actual test A 0.9323  with avg. lift  8.912250102026837e-05  vs baseline of  0.44880978831109447\n","(array(['Control', 'None', 'Variant A'], dtype='<U9'), array([ 248, 9323,  429]))\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"2WGnperPnOn7","executionInfo":{"status":"ok","timestamp":1624590354364,"user_tz":-480,"elapsed":15,"user":{"displayName":"Dorota Wymyslowska","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjgTQFgxXw8wJtA9v_Mxsm5HMmMLaEArMUXsnPp=s64","userId":"12730794236903812710"}},"outputId":"4f056777-2d7f-4604-d598-ba1864665def"},"source":["a = 0 \n","c = 0\n","for x in concurrent_testB:\n"," if x==actual_testB:\n","   a = a+ 1\n","print(\"A Winner as actual test B\", a/runs, \" with avg. lift \", mean (concurrent_testB_lift), \" vs baseline of \", mean(concurrent_testB_base) )\n","print(np.unique(concurrent_testB,return_counts=True))"],"execution_count":78,"outputs":[{"output_type":"stream","text":["A Winner as actual test B 1.0  with avg. lift  0.9000130405191722  vs baseline of  0.24799898141001805\n","(array(['Variant B'], dtype='<U9'), array([10000]))\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"VC0ZX7ol7KLN","executionInfo":{"status":"ok","timestamp":1624590354365,"user_tz":-480,"elapsed":14,"user":{"displayName":"Dorota Wymyslowska","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjgTQFgxXw8wJtA9v_Mxsm5HMmMLaEArMUXsnPp=s64","userId":"12730794236903812710"}},"outputId":"0d272755-2a63-47f0-c427-9f50b69ac53f"},"source":["a = 0 \n","c = 0\n","for x in multivariate_testA:\n"," if x==actual_testA:\n","    a = a+ 1\n","print(\"A Winner as actual test A\", a/runs, \" with avg. lift \", mean (multivariate_testA_lift), \" vs baseline of \", mean(multivariate_testA_base) )\n","print(np.unique(multivariate_testA,return_counts=True))"],"execution_count":79,"outputs":[{"output_type":"stream","text":["A Winner as actual test A 0.9441  with avg. lift  -5.703664614650993e-05  vs baseline of  0.24801206379923557\n","(array(['Control', 'None', 'Variant A'], dtype='<U9'), array([ 297, 9441,  262]))\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"czkGzN837Tm1","executionInfo":{"status":"ok","timestamp":1624590354367,"user_tz":-480,"elapsed":13,"user":{"displayName":"Dorota Wymyslowska","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjgTQFgxXw8wJtA9v_Mxsm5HMmMLaEArMUXsnPp=s64","userId":"12730794236903812710"}},"outputId":"e57ab23a-5cef-418f-e120-c39e9c7acbc1"},"source":["a = 0 \n","c = 0\n","for x in multivariate_testB:\n"," if x==actual_testB:\n","   a = a+ 1\n","print(\"A Winner as actual test B\", a/runs, \" with avg. lift \", mean (multivariate_testB_lift), \" vs baseline of \", mean(multivariate_testB_base) )\n","print(np.unique(multivariate_testB,return_counts=True))"],"execution_count":80,"outputs":[{"output_type":"stream","text":["A Winner as actual test B 1.0  with avg. lift  0.8999165354791686  vs baseline of  0.24801206379923557\n","(array(['Variant B'], dtype='<U9'), array([10000]))\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"BAb7npJo7X0B","executionInfo":{"status":"ok","timestamp":1624590354367,"user_tz":-480,"elapsed":10,"user":{"displayName":"Dorota Wymyslowska","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjgTQFgxXw8wJtA9v_Mxsm5HMmMLaEArMUXsnPp=s64","userId":"12730794236903812710"}},"outputId":"3bfbce7b-e88d-45d0-c5da-78a99536d83d"},"source":["a = 0 \n","c = 0\n","for x in multivariate_testAB:\n"," if x==actual_testAB:\n","   a = a+ 1\n","print(\"A Winner as actual test A+B\", a/runs, \" with avg. lift \", mean (multivariate_testAB_lift), \" vs baseline of \", mean(multivariate_testAB_base) )\n","print(np.unique(multivariate_testAB,return_counts=True))"],"execution_count":81,"outputs":[{"output_type":"stream","text":["A Winner as actual test A+B 1.0  with avg. lift  0.8999400636643982  vs baseline of  0.24801206379923557\n","(array(['Variant A+B'], dtype='<U11'), array([10000]))\n"],"name":"stdout"}]}]}