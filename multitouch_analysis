# http://stackoverflow.com/questions/36096311/sorting-the-dates-and-assigning-a-rank-python
%matplotlib inline
import pandas as pd
from dateutil.parser import parse
from datetime import datetime as dt
import xlrd
from pandasql import sqldf
from pandas import ExcelWriter
from numbers import Number
import numpy as np
import pylab as pl
from scipy import stats
from sklearn.externals.six import StringIO
from sklearn import preprocessing
from sklearn import cluster, tree, decomposition
import matplotlib.pyplot as plt
from sklearn.cluster import KMeans
from sklearn.decomposition import PCA
import seaborn
import matplotlib.pyplot as plt
from pandasql import sqldf

# Create a dataframe
# specify file path for windows users: target_file = r'C:\Users\k6o\aseanoutput.xlsx'
target_file1 = r'2017 Q1 Multi Touch Campaign Performance - Main Report.xlsx'
xls_file1 = pd.read_excel(target_file1)
# xls_file['Date Sent'] =  pd.to_datetime(xls_file['Date Sent'], format='%m-%d-%Y %I:%M:%S')
# xls_file['Created Date'] =  pd.to_datetime(xls_file['Created Date'], format='%m-%d-%Y %I:%M:%S')
# xls_file['Account Created'] =  pd.to_datetime(xls_file['Account Created'], format='%m-%d-%Y %I:%M:%S')
# xls_file['Contact Created'] =  pd.to_datetime(xls_file['Contact Created'], format='%m-%d-%Y %I:%M:%S')
# xls_file['Last Updated'] =  pd.to_datetime(xls_file['Last Updated'], format='%m-%d-%Y %I:%M:%S')
df=pd.DataFrame(xls_file1)
df.head()

# replace spaces in column names with underscore
df.columns = [x.strip().replace(' ', '_') for x in df.columns]

# find all first touches of campaigns for each end account pseudo ID
pysqldf = lambda q: sqldf(q, globals())

q  = """
SELECT DISTINCT
df.End_Account_Pseudo_ID
, df.Lead_Created_Date
, df.Lead_ID
, df.Campaign_Name
, df.Delivery_Mechanism
, df.Lic_Dollars
FROM
df
WHERE df.Lead_Created_Date IN (
  SELECT MIN(df.Lead_Created_Date)
  FROM df
  GROUP BY df.End_Account_Pseudo_ID
)
ORDER BY
df.End_Account_Pseudo_ID ASC;
"""
df_first_touch = pysqldf(q)

# count all first touches by delivery mechanism
q  = """
SELECT df_first_touch.Delivery_Mechanism, COUNT(DISTINCT df_first_touch.Lead_ID)
FROM
 df_first_touch
GROUP BY
 df_first_touch.Delivery_Mechanism;
"""
df_DM_firstTouch = pysqldf(q)

df_first_touch_dates = df_first_touch[['End_Account_Pseudo_ID','Lead_Created_Date']]
df_first_touch_dates = df_first_touch_dates.rename(columns={'End_Account_Pseudo_ID': 'End_Account_Pseudo_ID2', 'Lead_Created_Date': 'First_Touch_Date'})

# add first touch date to dataframe
q  = """
SELECT *
FROM
 df
LEFT JOIN df_first_touch_dates
ON df.End_Account_Pseudo_ID = df_first_touch_dates.End_Account_Pseudo_ID2;
"""
df_new = pysqldf(q)
df_new['Lead_Created_Date'] = pd.to_datetime(df_new['Lead_Created_Date'])
df_new['First_Touch_Date'] = pd.to_datetime(df_new['First_Touch_Date'])
df_new['Days_Since_FirstTouch'] = df_new['Lead_Created_Date'] - df_new['First_Touch_Date']
df_new['Days_Since_FirstTouch'] = df_new['Days_Since_FirstTouch'].map(lambda x: np.nan if pd.isnull(x) else x.days)

df_new.sort_values(by=['End_Account_Pseudo_ID', 'Days_Since_FirstTouch'], inplace=True)
df_new['Days_Since_PrevTouch'] = df_new.groupby('End_Account_Pseudo_ID')['Days_Since_FirstTouch'].diff().fillna('-')
df_new['Campaign Path'] = df_new.groupby('End_Account_Pseudo_ID')['Lead_Created_Date'].rank(method='min', na_option='keep')

# find all last touches of campaigns for each end account pseudo ID
pysqldf = lambda q: sqldf(q, globals())

q  = """
SELECT DISTINCT
df.End_Account_Pseudo_ID
, df.Lead_Created_Date
, df.Lead_ID
, df.Campaign_Name
, df.Delivery_Mechanism
, df.Lic_Dollars
FROM
df
WHERE df.Lead_Created_Date IN (
  SELECT MAX(df.Lead_Created_Date)
  FROM df
  GROUP BY df.End_Account_Pseudo_ID
)
ORDER BY
df.End_Account_Pseudo_ID ASC;
"""
df_last_touch = pysqldf(q)

# count all last touches by delivery mechanism
q  = """
SELECT df_last_touch.Delivery_Mechanism, COUNT(DISTINCT df_last_touch.Lead_ID)
FROM
 df_last_touch
GROUP BY
 df_last_touch.Delivery_Mechanism;
"""
df_DM_lastTouch = pysqldf(q)

# plot graph of days since first touch

# df_daysSinceGraph = df_new[['End_Account_Pseudo_ID', 'Lead_Account_Country', 'Days_Since_FirstTouch']]
# df_daysSinceGraph_country = df_daysSinceGraph[(df_daysSinceGraph['Lead_Account_Country'] == 'Singapore')]
# df_daysSinceGraph_country = pd.
# df_daysSinceGraph_country.plot()

writer = ExcelWriter('multitouch_analysis.xlsx')
df.to_excel(writer, 'Full Table')
df_new.to_excel(writer, 'Table_Days_Since')
df_first_touch.to_excel(writer,'FirstTouch List')
df_DM_firstTouch.to_excel(writer,'FirstTouch DM')
df_last_touch.to_excel(writer, 'LastTouch List')
df_DM_lastTouch.to_excel(writer, 'LastTouch DM')
writer.save()

