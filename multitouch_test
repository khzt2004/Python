# http://stackoverflow.com/questions/36096311/sorting-the-dates-and-assigning-a-rank-python
%matplotlib inline
import pandas as pd
from dateutil.parser import parse
from datetime import datetime
import xlrd
from pandasql import sqldf
from pandas import ExcelWriter
from numbers import Number
import numpy as np
import pylab as pl
from scipy import stats
from sklearn.externals.six import StringIO
from sklearn import preprocessing
from sklearn import cluster, tree, decomposition
import matplotlib.pyplot as plt
from sklearn.cluster import KMeans
from sklearn.decomposition import PCA
import seaborn
import matplotlib.pyplot as plt

# Create a dataframe
# specify file path for windows users: target_file = r'C:\Users\k6o\aseanoutput.xlsx'
target_file1 = r'2016_Multi Touch Campaign Performance - Main Report.xlsx'
xls_file1 = pd.read_excel(target_file1)
# xls_file['Date Sent'] =  pd.to_datetime(xls_file['Date Sent'], format='%m-%d-%Y %I:%M:%S')
# xls_file['Created Date'] =  pd.to_datetime(xls_file['Created Date'], format='%m-%d-%Y %I:%M:%S')
# xls_file['Account Created'] =  pd.to_datetime(xls_file['Account Created'], format='%m-%d-%Y %I:%M:%S')
# xls_file['Contact Created'] =  pd.to_datetime(xls_file['Contact Created'], format='%m-%d-%Y %I:%M:%S')
# xls_file['Last Updated'] =  pd.to_datetime(xls_file['Last Updated'], format='%m-%d-%Y %I:%M:%S')
df=pd.DataFrame(xls_file1)
df.head()

# make unique list of pseudo ID
PID_unique_list = df["End Account Pseudo ID"].unique()
PID_unique_list = PID_unique_list.tolist()
# working sort, find range of dates and rank
df['rank'] = df.sort_values(['End Account Pseudo ID','Lead Created Date']) \
                         .groupby(['End Account Pseudo ID'])['Lead Created Date'] \
                         .rank(method='min').astype(int)
df_sorted = df.sort_values(['End Account Pseudo ID','rank'])
tmp = df.groupby(['End Account Pseudo ID','Delivery Mechanism', 'Campaign Name', 'Lead Created Date', 'rank'])['Lic Dollars'].sum()
tmp_df = pd.DataFrame(tmp)
tmp_df.index[2][1]



# move on to next unique pseudo ID in list
# create new df, add list of unique pseudo ID to first column in new df
# concatenate lead IDs in order of rank and append to new column in new df
# data from column where end account pseudo

# add to column in DF

path_df = pd.DataFrame(PID_unique_list)
path_df = path_df.rename(index=str, columns={0: "PID_unique_list"})

# var a & b need to be checked
a_list = []
b_list = []
campaign_path = []
for i in range(0, len(PID_unique_list)):
    a = df.loc[df['End Account Pseudo ID'] == PID_unique_list[i]]['Campaign Name'].tolist()
    b = df.loc[df['End Account Pseudo ID'] == PID_unique_list[i]]['rank'].tolist()
    b = [x-1 for x in b]
    dict_ = dict(zip(b, a))
    c = dict_.values()
    c = ' > '.join(c)
    campaign_path.append(c)
    # for row in path_df['PID_unique_list']:

path_df['Campaign Path'] = campaign_path
tmp_df_reset = pd.DataFrame(tmp).reset_index()

df.sort_values('value')
rank = tmp.map(range)
rank =[item for sublist in rank for item in sublist]
df['rank'] = rank

# ranking1 = df.groupby('group')['rank'].rank(ascending=False)
ranking1 = df.groupby('group').apply(pd.DataFrame.sort_values, 'rank')
ranking_test = df.groupby('group', sort=False)['id'].apply(' '.join)

writer = ExcelWriter('multitouch_test.xlsx')
path_df.to_excel(writer,'Pivot Table')
df.to_excel(writer,'Full Table')
writer.save()
